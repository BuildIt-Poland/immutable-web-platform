{config, pkgs, lib, kubenix, integration-modules, inputs, ...}: 
with pkgs.lib;
let
  functions = (import ./modules/functions.nix { inherit pkgs; });
in
{
  imports = with integration-modules.modules; [
    ./kubernetes-modules.nix
    project-configuration
    kubernetes
    kubernetes-resources
    kubernetes-tools
    bitbucket-k8s-repo
    shell-tools
    docker
    storage
    brigade
    bitbucket
    git-secrets
    aws
    base
  ];

  config = {
    environment = {
      type = inputs.environment.type;
      perspective = inputs.environment.perspective;
      vars = {
        PROJECT_NAME = config.project.name;
      };
    };

    # FIXME based on target take from modules
    project = rec {
      name = inputs.project.name;
      author-email = "damian.baar@wipro.com";
      domain = "buildit.consulting";
      version = "0.0.1";
      resources.yaml.folder = "$PWD/resources";
      repositories = {
        k8s-resources = "git@bitbucket.org:damian.baar/k8s-infra-descriptors.git";
        code-repository = "git@bitbucket.org:digitalrigbitbucketteam/embracing-nix-docker-k8s-helm-knative.git";
      };
      make-sub-domain = 
        name: 
          (lib.concatStringsSep "." 
            (builtins.filter (x: x != "") [
              name
              config.project.name
              config.environment.type
              config.project.domain
            ]));
    };

    test.enable = inputs.tests.enable;

    docker = rec {
      upload = inputs.docker.upload;
      namespace = "${config.project.name}";
      imageName = name: "${namespace}/${name}";
      imageTag = name: "${tag}";
      tag = makeDefault inputs.docker.tag "dev-build";
    };

    aws = {
      account = "006393696278";
      location = {
        credentials = ~/.aws/credentials;
        config = ~/.aws/config;
      };
      s3-buckets = {
        worker-cache = "${config.project.name}-${config.environment.type}-worker-binary-store";
      };
    };

    brigade = {
      enabled = true;
      secret-key = inputs.brigade.secret;
      projects = {
        brigade-project = {
          project-name = "embracing-nix-docker-k8s-helm-knative";
          project-ref = "digitalrigbitbucketteam/embracing-nix-docker-k8s-helm-knative"; # like repo
          pipeline-file = ../../pipeline/infrastructure.ts; # think about these long paths
          clone-url = config.project.repositories.code-repository;
          ssh-key = config.bitbucket.ssh-keys.priv;
          # https://github.com/brigadecore/k8s-resources/blob/master/k8s-resources/brigade-project/values.yaml
          overridings = {
            kubernetes = {
              cacheStorageClass = "cache-storage";
              buildStorageClass = "build-storage";
            };
          };
        };
      };
    };

    git-secrets = {
      location = ../../secrets.json;
    };

    kubernetes = {
      target = inputs.kubernetes.target;
      tools.enable = inputs.kubernetes.tools;
      validation.enable = inputs.opa.validation;

      namespace = {
        functions = {
          name = "${config.environment.type}-functions";
          metadata.labels = {
            "istio-injection" = "enabled";
          };
        };
        argo.name = "gitops";
        brigade.name = "ci";
      };

      cluster = {
        clean = inputs.kubernetes.clean;
        name = "${config.project.name}-${config.environment.type}-cluster";
      };
      patches.enable = inputs.kubernetes.patches;
      resources = {
        apply = inputs.kubernetes.update;
        save = inputs.kubernetes.save;
      };
    };

    # should be autogenerated from terraform for dev env
    bitbucket = {
      ssh-keys.location = ~/.ssh/bitbucket_webhook;
    };
  };
}